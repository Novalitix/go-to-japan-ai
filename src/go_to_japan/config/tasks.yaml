orchestration_boot:
  description: >
    Lance le processus de planification en rappelant à tous les agents leurs responsabilités
    respectives et en définissant l’ordre logique des tâches à exécuter. Le
    conducteur doit vérifier les préférences initiales du voyageur et préparer
    une stratégie globale de collaboration.
  expected_output: >
    Un bref rapport décrivant la séquence des tâches prévues, l’agent assigné
    à chacune et les attentes clés pour chaque étape, confirmant que le pipeline
    d’orchestration est initialisé et prêt.
  agent: conductor_orchestrator

parse_and_normalize_profile:
  description: >
    Analyse le JSON fourni par l’utilisateur, valide sa structure et extrait
    toutes les informations pertinentes (type de voyage, accompagnants, rythme,
    dates ou durée, villes à inclure ou exclure, budget, centres d’intérêt,
    services et commentaires). Normalise les dates au format AAAA-MM-JJ et
    calcule la durée totale du voyage.
  expected_output: >
    Un objet JSON structuré contenant les champs obligatoires suivants :
    planningType, travelWith, pace, dates, duration, citiesIncluded,
    citiesExcluded, budget, interests, services, comments et assumptions
    (liste des hypothèses formulées si des informations manquent). Toutes les
    dates doivent être au format ISO et les montants budgétaires exprimés en
    yen et euros.
  agent: intent_profile_parser
  context:
    - orchestration_boot

live_research_and_facts:
  description: >
    Réalise des recherches en ligne pour chaque ville ou région potentielle afin
    d’identifier les événements à venir, attractions, restaurants émergents,
    infrastructures et actualités importantes. Sélectionne des sources
    officielles et fiables et résume les informations clés pour l’équipe.
  expected_output: >
    Un objet JSON où chaque ville est associée à une liste d’éléments. Chaque
    élément doit inclure les clés : title, description, category (événement,
    attraction, restaurant, hébergement…), date (ou période), et source
    (URL avec date de publication). Au moins une source datée est requise pour
    chaque élément.
  agent: live_research_scout
  context:
    - parse_and_normalize_profile

city_sequencing_and_districts:
  description: >
    Utilise les préférences et résultats de recherche pour sélectionner les
    villes à visiter, établir l’ordre optimal de visite et définir la durée
    idéale dans chaque ville. Propose également des districts ou quartiers
    recommandés à explorer dans chaque destination.
  expected_output: >
    Un objet JSON contenant une liste ordonnée nommée itinerary. Chaque
    entrée de cette liste doit comporter les clés : city, days (nombre de
    jours), districts (liste de quartiers), justification (raison du choix)
    et sources (liste de liens datés). La somme des jours doit correspondre
    à la durée totale du voyage.
  agent: city_curator
  context:
    - parse_and_normalize_profile
    - live_research_and_facts

weather_windows_and_plan_b:
  description: >
    Analyse les données météorologiques et saisonnières pour chaque ville et
    période proposée afin d’anticiper les conditions climatiques. Identifie
    les événements saisonniers et propose des recommandations d’adaptation
    (vêtements, activités alternatives en cas de mauvais temps).
  expected_output: >
    Un objet JSON où chaque ville contient : weather_summary (températures
    moyennes, précipitations probables et phénomènes particuliers),
    seasonal_events (liste d’événements avec dates et sources) et
    recommendations (conseils pratiques et activités de repli). Chaque ville
    doit être associée à au moins une source fiable datée.
  agent: weather_season_analyst
  context:
    - city_sequencing_and_districts

transport_segments_and_pass:
  description: >
    Établit les segments de transport entre les villes et les déplacements
    significatifs à l’intérieur des villes. Détermine les modes de transport
    recommandés, estime les durées et coûts et signale les pass ou réservations
    nécessaires.
  expected_output: >
    Un objet JSON contenant une liste segments. Chaque segment comporte les
    champs : from_city, to_city, mode, duration (en minutes ou heures),
    cost_estimate (en yen), notes (ex : pass requis, vues panoramiques) et
    source (lien daté confirmant l’information). Tous les segments doivent
    couvrir l’itinéraire défini.
  agent: transport_planner
  context:
    - city_sequencing_and_districts
    - weather_windows_and_plan_b

lodging_options_by_city:
  description: >
    Recherche et sélectionne des options d’hébergement pour chaque ville en
    tenant compte du budget et des préférences de confort ou d’expérience.
    Présente au moins deux alternatives par ville avec leurs caractéristiques
    principales.
  expected_output: >
    Un objet JSON listant les villes et, pour chacune, un tableau accommodations
    contenant au minimum deux options. Chaque option doit inclure : name,
    type (hôtel, ryokan, guesthouse…), price_per_night, total_estimate,
    pros, cons, link (URL) et source_date (date de la source). Les prix
    doivent être exprimés en yen et en euros, taxes incluses.
  agent: stay_lodging_curator
  context:
    - city_sequencing_and_districts

daily_activities_sequencing:
  description: >
    Conçoit le programme quotidien détaillé en tenant compte des intérêts du
    voyageur, de la météo et de la localisation des activités. Planifie les
    horaires, durées et transitions pour chaque journée et propose des
    alternatives en cas d’imprévu.
  expected_output: >
    Un objet JSON avec une clé days. Chaque élément de days doit inclure
    city, date, activities (liste d’activités avec name, start_time,
    duration, description, cost, address et source) et alt_options (liste
    d’options de secours). Chaque activité doit avoir au moins une source
    fiable et datée.
  agent: activities_experiences_designer
  context:
    - city_sequencing_and_districts
    - weather_windows_and_plan_b
    - live_research_and_facts

dining_plan_and_culinary_highlights:
  description: >
    Élabore un plan de restauration pour chaque jour du voyage, en
    recommandant des restaurants et expériences culinaires adaptés au budget,
    aux restrictions et à l’itinéraire des activités. Met en avant les
    spécialités locales et plats emblématiques.
  expected_output: >
    Un objet JSON contenant une liste meals. Chaque entrée doit inclure :
    day, meal_type (petit déjeuner, déjeuner, dîner), restaurant, cuisine,
    price_range, dish_recommendation, address, reservation_needed (booléen)
    et source (URL datée). Au moins une option par repas est requise et
    chaque source doit être fiable et récente.
  agent: gastro_dining_curator
  context:
    - daily_activities_sequencing

budget_aggregation_and_variants:
  description: >
    Agrège les coûts estimés de transport, hébergement, repas et activités
    afin de calculer le budget total du voyage. Compare ce total au budget
    indiqué par l’utilisateur et propose des variantes ou ajustements si
    nécessaire.
  expected_output: >
    Un objet JSON contenant : breakdown (objets de catégorie avec leurs
    coûts), total (somme globale), difference_from_budget (écart par rapport
    au budget initial) et scenarios (liste de variantes avec description des
    ajustements et impact financier). Chaque coût doit faire référence à
    l’élément source d’origine et inclure un lien daté pour vérification.
  agent: budget_feasibility_controller
  context:
    - transport_segments_and_pass
    - lodging_options_by_city
    - daily_activities_sequencing
    - dining_plan_and_culinary_highlights

facts_and_sources_verification:
  description: >
    Vérifie l’exactitude de toutes les informations et la fiabilité des
    sources fournies dans les tâches précédentes. Identifie les erreurs ou
    incohérences et consigne les corrections nécessaires tout en mettant à
    jour le registre des sources.
  expected_output: >
    Un objet JSON comprenant : validated_items (liste de faits avec statut
    validé ou rejeté), issues_found (liste d’erreurs ou d’incohérences
    détectées), corrective_actions (mesures correctives suggérées) et
    sources_registry (liste mise à jour des sources avec titre, lien et
    date). Chaque fait validé doit être associé à une source fiable et datée.
  agent: facts_sources_verifier
  context:
    - live_research_and_facts
    - city_sequencing_and_districts
    - weather_windows_and_plan_b
    - transport_segments_and_pass
    - lodging_options_by_city
    - daily_activities_sequencing
    - dining_plan_and_culinary_highlights
    - budget_aggregation_and_variants

quality_and_consistency_audit:
  description: >
    Examine la cohérence et la qualité de l’ensemble des livrables (villes,
    météo, transports, hébergements, activités, restauration, budget,
    sources) pour s’assurer qu’ils respectent les préférences et contraintes
    utilisateur. Identifie les lacunes et priorise les améliorations.
  expected_output: >
    Un objet JSON contenant : audit_summary (résumé global), inconsistencies
    (liste des incohérences identifiées), missing_elements (éléments manquants)
    et recommendations (actions recommandées pour améliorer la cohérence et
    l’exhaustivité). Toutes les incohérences doivent être documentées avec
    références aux tâches concernées.
  agent: quality_consistency_auditor
  context:
    - facts_and_sources_verification
    - budget_aggregation_and_variants

itinerary_synthesis_and_packaging:
  description: >
    Synthétise toutes les informations validées en un itinéraire final
    jour par jour, incluant transports, hébergements, repas, activités,
    coûts détaillés, variantes et sources. Formate le résultat de façon
    claire et attrayante pour l’utilisateur.
  expected_output: >
    Un document complet contenant l’itinéraire détaillé jour par jour avec
    toutes les informations essentielles (transport, hébergement, repas,
    activités, durée, coûts, sources datées), un résumé général, le budget
    total, les hypothèses et variantes et une bibliographie des sources. Le
    document doit être rédigé en français et respecter une structure
    markdown claire.
  agent: itinerary_synthesizer
  context:
    - quality_and_consistency_audit
  markdown: true
  output_file: outputs/final_itinerary.md